//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_Container_BindingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToluaContainer.Container.Binding), typeof(System.Object));
		L.RegFunction("ToAddress", ToAddress);
		L.RegFunction("To", To);
		L.RegFunction("As", As);
		L.RegFunction("When", When);
		L.RegFunction("Into", Into);
		L.RegFunction("Bind", Bind);
		L.RegFunction("BindSingleton", BindSingleton);
		L.RegFunction("BindFactory", BindFactory);
		L.RegFunction("BindMultiton", BindMultiton);
		L.RegFunction("MultipleBind", MultipleBind);
		L.RegFunction("RemoveValue", RemoveValue);
		L.RegFunction("RemoveValues", RemoveValues);
		L.RegFunction("ParentInstanceCondition", ParentInstanceCondition);
		L.RegFunction("PassToAdd", PassToAdd);
		L.RegFunction("SetValue", SetValue);
		L.RegFunction("SetConstraint", SetConstraint);
		L.RegFunction("SetBindingType", SetBindingType);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateToluaContainer_Container_Binding);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("binder", get_binder, null);
		L.RegVar("type", get_type, null);
		L.RegVar("value", get_value, null);
		L.RegVar("valueList", get_valueList, null);
		L.RegVar("id", get_id, set_id);
		L.RegVar("constraint", get_constraint, null);
		L.RegVar("bindingType", get_bindingType, null);
		L.RegVar("condition", get_condition, set_condition);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToluaContainer_Container_Binding(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ToluaContainer.Container.IBinder arg0 = (ToluaContainer.Container.IBinder)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinder));
				System.Type arg1 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
				ToluaContainer.Container.Binding obj = new ToluaContainer.Container.Binding(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinder), typeof(System.Type), typeof(ToluaContainer.Container.BindingType)))
			{
				ToluaContainer.Container.IBinder arg0 = (ToluaContainer.Container.IBinder)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinder));
				System.Type arg1 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
				ToluaContainer.Container.BindingType arg2 = (ToluaContainer.Container.BindingType)ToLua.CheckObject(L, 3, typeof(ToluaContainer.Container.BindingType));
				ToluaContainer.Container.Binding obj = new ToluaContainer.Container.Binding(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinder), typeof(System.Type), typeof(ToluaContainer.Container.BindingType), typeof(ToluaContainer.Container.ConstraintType)))
			{
				ToluaContainer.Container.IBinder arg0 = (ToluaContainer.Container.IBinder)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinder));
				System.Type arg1 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
				ToluaContainer.Container.BindingType arg2 = (ToluaContainer.Container.BindingType)ToLua.CheckObject(L, 3, typeof(ToluaContainer.Container.BindingType));
				ToluaContainer.Container.ConstraintType arg3 = (ToluaContainer.Container.ConstraintType)ToLua.CheckObject(L, 4, typeof(ToluaContainer.Container.ConstraintType));
				ToluaContainer.Container.Binding obj = new ToluaContainer.Container.Binding(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToluaContainer.Container.Binding.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAddress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			ToluaContainer.Container.IBinding o = obj.ToAddress();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int To(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.Binding), typeof(object[])))
			{
				ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.ToObject(L, 1);
				object[] arg0 = ToLua.CheckObjectArray(L, 2);
				ToluaContainer.Container.IBinding o = obj.To(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.Binding), typeof(object)))
			{
				ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				ToluaContainer.Container.IBinding o = obj.To(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.Binding.To");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int As(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			object arg0 = ToLua.ToVarObject(L, 2);
			ToluaContainer.Container.IBinding o = obj.As(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int When(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			ToluaContainer.Container.Condition arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ToluaContainer.Container.Condition)ToLua.CheckObject(L, 2, typeof(ToluaContainer.Container.Condition));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ToluaContainer.Container.Condition), func) as ToluaContainer.Container.Condition;
			}

			ToluaContainer.Container.IBinding o = obj.When(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Into(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			ToluaContainer.Container.IBinding o = obj.Into(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Bind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			ToluaContainer.Container.IBinding o = obj.Bind(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindSingleton(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			ToluaContainer.Container.IBinding o = obj.BindSingleton(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindFactory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			ToluaContainer.Container.IBinding o = obj.BindFactory(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BindMultiton(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			ToluaContainer.Container.IBinding o = obj.BindMultiton(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MultipleBind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			System.Type[] arg0 = ToLua.CheckObjectArray<System.Type>(L, 2);
			ToluaContainer.Container.BindingType[] arg1 = ToLua.CheckObjectArray<ToluaContainer.Container.BindingType>(L, 3);
			ToluaContainer.Container.IBindingFactory o = obj.MultipleBind(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			object arg0 = ToLua.ToVarObject(L, 2);
			ToluaContainer.Container.IBinding o = obj.RemoveValue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			object[] arg0 = ToLua.CheckObjectArray(L, 2);
			ToluaContainer.Container.IBinding o = obj.RemoveValues(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParentInstanceCondition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			object arg0 = ToLua.ToVarObject(L, 2);
			ToluaContainer.Container.IBinding o = obj.ParentInstanceCondition(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PassToAdd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.PassToAdd(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			object arg0 = ToLua.ToVarObject(L, 2);
			ToluaContainer.Container.IBinding o = obj.SetValue(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetConstraint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			ToluaContainer.Container.ConstraintType arg0 = (ToluaContainer.Container.ConstraintType)ToLua.CheckObject(L, 2, typeof(ToluaContainer.Container.ConstraintType));
			ToluaContainer.Container.IBinding o = obj.SetConstraint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBindingType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			ToluaContainer.Container.BindingType arg0 = (ToluaContainer.Container.BindingType)ToLua.CheckObject(L, 2, typeof(ToluaContainer.Container.BindingType));
			ToluaContainer.Container.IBinding o = obj.SetBindingType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.Binding));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_binder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			ToluaContainer.Container.IBinder ret = obj.binder;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index binder on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			System.Type ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			object ret = obj.value;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index value on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_valueList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			System.Collections.Generic.IList<object> ret = obj.valueList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index valueList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			object ret = obj.id;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constraint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			ToluaContainer.Container.ConstraintType ret = obj.constraint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constraint on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bindingType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			ToluaContainer.Container.BindingType ret = obj.bindingType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bindingType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_condition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			ToluaContainer.Container.Condition ret = obj.condition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index condition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_condition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.Binding obj = (ToluaContainer.Container.Binding)o;
			ToluaContainer.Container.Condition arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ToluaContainer.Container.Condition)ToLua.CheckObject(L, 2, typeof(ToluaContainer.Container.Condition));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ToluaContainer.Container.Condition), func) as ToluaContainer.Container.Condition;
			}

			obj.condition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index condition on a nil value" : e.Message);
		}
	}
}

