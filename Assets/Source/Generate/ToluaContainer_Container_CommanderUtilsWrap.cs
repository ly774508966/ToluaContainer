//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_Container_CommanderUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("CommanderUtils");
		L.RegFunction("GetAvailableCommands", GetAvailableCommands);
		L.RegFunction("DispatchCommand", DispatchCommand);
		L.RegFunction("GetTypesAsString", GetTypesAsString);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAvailableCommands(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Type[] o = ToluaContainer.Container.CommanderUtils.GetAvailableCommands();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchCommand(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
			ToluaContainer.Container.CommanderUtils.DispatchCommand(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTypesAsString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Type[] arg0 = ToLua.CheckObjectArray<System.Type>(L, 1);
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.IList<string>> o = ToluaContainer.Container.CommanderUtils.GetTypesAsString(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

