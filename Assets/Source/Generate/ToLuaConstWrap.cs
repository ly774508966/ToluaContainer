//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToLuaConstWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("ToLuaConst");
		L.RegVar("luaDir", get_luaDir, set_luaDir);
		L.RegVar("toluaDir", get_toluaDir, set_toluaDir);
		L.RegVar("osDir", get_osDir, set_osDir);
		L.RegVar("luaResDir", get_luaResDir, set_luaResDir);
		L.RegVar("zbsDir", get_zbsDir, set_zbsDir);
		L.RegVar("openLuaSocket", get_openLuaSocket, set_openLuaSocket);
		L.RegVar("openZbsDebugger", get_openZbsDebugger, set_openZbsDebugger);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToLuaConst.luaDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_toluaDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToLuaConst.toluaDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_osDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToLuaConst.osDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaResDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToLuaConst.luaResDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_zbsDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToLuaConst.zbsDir);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_openLuaSocket(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, ToLuaConst.openLuaSocket);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_openZbsDebugger(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, ToLuaConst.openZbsDebugger);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			ToLuaConst.luaDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_toluaDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			ToLuaConst.toluaDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_osDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			ToLuaConst.osDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaResDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			ToLuaConst.luaResDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_zbsDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			ToLuaConst.zbsDir = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_openLuaSocket(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			ToLuaConst.openLuaSocket = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_openZbsDebugger(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			ToLuaConst.openZbsDebugger = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

