//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_Container_CommandExceptionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToluaContainer.Container.CommandException), typeof(System.Exception));
		L.RegFunction("New", _CreateToluaContainer_Container_CommandException);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("TYPE_NOT_A_COMMAND", get_TYPE_NOT_A_COMMAND, null);
		L.RegVar("MAX_POOL_SIZE", get_MAX_POOL_SIZE, null);
		L.RegVar("NO_COMMAND_FOR_TYPE", get_NO_COMMAND_FOR_TYPE, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToluaContainer_Container_CommandException(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ToluaContainer.Container.CommandException obj = new ToluaContainer.Container.CommandException(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToluaContainer.Container.CommandException.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TYPE_NOT_A_COMMAND(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToluaContainer.Container.CommandException.TYPE_NOT_A_COMMAND);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_POOL_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToluaContainer.Container.CommandException.MAX_POOL_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NO_COMMAND_FOR_TYPE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, ToluaContainer.Container.CommandException.NO_COMMAND_FOR_TYPE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

