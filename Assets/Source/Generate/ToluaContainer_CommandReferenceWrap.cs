//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_CommandReferenceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToluaContainer.CommandReference), typeof(System.Object));
		L.RegFunction("DispatchCommand", DispatchCommand);
		L.RegFunction("New", _CreateToluaContainer_CommandReference);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("commandNamespace", get_commandNamespace, set_commandNamespace);
		L.RegVar("commandName", get_commandName, set_commandName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToluaContainer_CommandReference(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ToluaContainer.CommandReference obj = new ToluaContainer.CommandReference();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToluaContainer.CommandReference.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchCommand(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			ToluaContainer.CommandReference obj = (ToluaContainer.CommandReference)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandReference));
			object[] arg0 = ToLua.ToParamsObject(L, 2, count - 1);
			obj.DispatchCommand(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_commandNamespace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.CommandReference obj = (ToluaContainer.CommandReference)o;
			string ret = obj.commandNamespace;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index commandNamespace on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_commandName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.CommandReference obj = (ToluaContainer.CommandReference)o;
			string ret = obj.commandName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index commandName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_commandNamespace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.CommandReference obj = (ToluaContainer.CommandReference)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.commandNamespace = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index commandNamespace on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_commandName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.CommandReference obj = (ToluaContainer.CommandReference)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.commandName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index commandName on a nil value" : e.Message);
		}
	}
}

