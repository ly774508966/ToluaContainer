//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_CommandDispatcherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToluaContainer.CommandDispatcher), typeof(System.Object));
		L.RegFunction("Dispatch", Dispatch);
		L.RegFunction("InvokeDispatch", InvokeDispatch);
		L.RegFunction("Release", Release);
		L.RegFunction("ReleaseAll", ReleaseAll);
		L.RegFunction("Pool", Pool);
		L.RegFunction("ContainsCommands", ContainsCommands);
		L.RegFunction("GetAllRegistrations", GetAllRegistrations);
		L.RegFunction("GetCommandFromPool", GetCommandFromPool);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateToluaContainer_CommandDispatcher);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToluaContainer_CommandDispatcher(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ToluaContainer.Container.IInjectionContainer arg0 = (ToluaContainer.Container.IInjectionContainer)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IInjectionContainer));
				ToluaContainer.CommandDispatcher obj = new ToluaContainer.CommandDispatcher(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToluaContainer.CommandDispatcher.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			obj.Dispatch(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InvokeDispatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
			obj.InvokeDispatch(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			ToluaContainer.ICommand arg0 = (ToluaContainer.ICommand)ToLua.CheckObject(L, 2, typeof(ToluaContainer.ICommand));
			obj.Release(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.CommandDispatcher)))
			{
				ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.ToObject(L, 1);
				obj.ReleaseAll();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.CommandDispatcher), typeof(System.Type)))
			{
				ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.ToObject(L, 1);
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 2);
				obj.ReleaseAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.CommandDispatcher.ReleaseAll");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			obj.Pool();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsCommands(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			bool o = obj.ContainsCommands(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllRegistrations(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			System.Type[] o = obj.GetAllRegistrations();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCommandFromPool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.CommandDispatcher), typeof(System.Type)))
			{
				ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.ToObject(L, 1);
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 2);
				ToluaContainer.ICommand o = obj.GetCommandFromPool(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.CommandDispatcher), typeof(System.Type), typeof(System.Collections.Generic.List<ToluaContainer.ICommand>)))
			{
				ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.ToObject(L, 1);
				System.Type arg0 = (System.Type)ToLua.ToObject(L, 2);
				System.Collections.Generic.List<ToluaContainer.ICommand> arg1 = (System.Collections.Generic.List<ToluaContainer.ICommand>)ToLua.ToObject(L, 3);
				ToluaContainer.ICommand o = obj.GetCommandFromPool(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.CommandDispatcher.GetCommandFromPool");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.CommandDispatcher obj = (ToluaContainer.CommandDispatcher)ToLua.CheckObject(L, 1, typeof(ToluaContainer.CommandDispatcher));
			obj.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

