//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_Container_AssetBundleInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToluaContainer.Container.AssetBundleInfo), typeof(System.Object));
		L.RegFunction("LoadFromFile", LoadFromFile);
		L.RegFunction("GetCoroutineFromFile", GetCoroutineFromFile);
		L.RegFunction("GetAsyncFromFile", GetAsyncFromFile);
		L.RegFunction("LoadFromMemory_NW", LoadFromMemory_NW);
		L.RegFunction("LoadFromCacheOrDownload", LoadFromCacheOrDownload);
		L.RegFunction("LoadCoroutineFromCacheOrDownload", LoadCoroutineFromCacheOrDownload);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateToluaContainer_Container_AssetBundleInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("asetBundle", get_asetBundle, null);
		L.RegVar("url", get_url, set_url);
		L.RegVar("isLoaded", get_isLoaded, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToluaContainer_Container_AssetBundleInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ToluaContainer.Container.AssetBundleInfo obj = new ToluaContainer.Container.AssetBundleInfo(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.AssetBundle), typeof(string)))
			{
				UnityEngine.AssetBundle arg0 = (UnityEngine.AssetBundle)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.AssetBundle));
				string arg1 = ToLua.CheckString(L, 2);
				ToluaContainer.Container.AssetBundleInfo obj = new ToluaContainer.Container.AssetBundleInfo(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToluaContainer.Container.AssetBundleInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo));
			obj.LoadFromFile();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCoroutineFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo));
			System.Action<UnityEngine.Object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Object>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
			}

			System.Collections.IEnumerator o = obj.GetCoroutineFromFile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAsyncFromFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.ToObject(L, 1);
				System.Action<UnityEngine.Object> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				System.Collections.IEnumerator o = obj.GetAsyncFromFile(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo), typeof(System.Action<UnityEngine.Object>), typeof(System.Action<float>)))
			{
				ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.ToObject(L, 1);
				System.Action<UnityEngine.Object> arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				System.Action<float> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<float>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
				}

				System.Collections.IEnumerator o = obj.GetAsyncFromFile(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.AssetBundleInfo.GetAsyncFromFile");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFromMemory_NW(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo));
			System.Collections.IEnumerator o = obj.LoadFromMemory_NW();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadFromCacheOrDownload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo));
			obj.LoadFromCacheOrDownload();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadCoroutineFromCacheOrDownload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo));
			System.Action<UnityEngine.Object> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.Object>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.Object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
			}

			System.Collections.IEnumerator o = obj.LoadCoroutineFromCacheOrDownload(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.AssetBundleInfo));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Dispose(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_asetBundle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)o;
			UnityEngine.AssetBundle ret = obj.asetBundle;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index asetBundle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)o;
			string ret = obj.url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index url on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isLoaded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)o;
			bool ret = obj.isLoaded;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isLoaded on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToluaContainer.Container.AssetBundleInfo obj = (ToluaContainer.Container.AssetBundleInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index url on a nil value" : e.Message);
		}
	}
}

