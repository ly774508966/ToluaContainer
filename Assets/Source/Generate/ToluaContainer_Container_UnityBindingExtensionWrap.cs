//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_Container_UnityBindingExtensionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("UnityBindingExtension");
		L.RegFunction("ToGameObject", ToGameObject);
		L.RegFunction("ToGameObjectDDOL", ToGameObjectDDOL);
		L.RegFunction("ToGameObjects", ToGameObjects);
		L.RegFunction("ToGameObjectWithTag", ToGameObjectWithTag);
		L.RegFunction("ToGameObjectsWithTag", ToGameObjectsWithTag);
		L.RegFunction("ToPrefab", ToPrefab);
		L.RegFunction("ToPrefabAsync", ToPrefabAsync);
		L.RegFunction("ToPrefabCoroutine", ToPrefabCoroutine);
		L.RegFunction("ToAssetBundleFromFile", ToAssetBundleFromFile);
		L.RegFunction("ToAssetBundleAsyncFromFile", ToAssetBundleAsyncFromFile);
		L.RegFunction("ToAssetBundleCoroutineFromFile", ToAssetBundleCoroutineFromFile);
		L.RegFunction("ToAssetBundleFromNewWWW", ToAssetBundleFromNewWWW);
		L.RegFunction("ToAssetBundleFromCacheOrDownload", ToAssetBundleFromCacheOrDownload);
		L.RegFunction("ToAssetBundleCoroutineFromCacheOrDownload", ToAssetBundleCoroutineFromCacheOrDownload);
		L.RegFunction("ToResource", ToResource);
		L.RegFunction("Instantiate", Instantiate);
		L.RegFunction("Unload", Unload);
		L.RegFunction("UnloadAssetBundle", UnloadAssetBundle);
		L.RegFunction("CleanCache", CleanCache);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToGameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObject(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObject(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObject(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToGameObject");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToGameObjectDDOL(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectDDOL(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectDDOL(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectDDOL(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectDDOL(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToGameObjectDDOL");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToGameObjects(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			UnityEngine.GameObject[] arg2 = ToLua.CheckObjectArray<UnityEngine.GameObject>(L, 3);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjects(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToGameObjectWithTag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectWithTag(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectWithTag(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToGameObjectWithTag");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToGameObjectsWithTag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectsWithTag(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToGameObjectsWithTag(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToGameObjectsWithTag");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToPrefab(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefab(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefab(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToPrefab");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToPrefabAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<float>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<float> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<float>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabAsync(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string), typeof(System.Action<UnityEngine.Object>), typeof(System.Action<float>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				System.Action<UnityEngine.Object> arg3 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg3 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				System.Action<float> arg4 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg4 = (System.Action<float>)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabAsync(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToPrefabAsync");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToPrefabCoroutine(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabCoroutine(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabCoroutine(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Type), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Type arg1 = (System.Type)ToLua.ToObject(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				System.Action<UnityEngine.Object> arg3 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg3 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToPrefabCoroutine(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToPrefabCoroutine");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAssetBundleFromFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			string arg1 = ToLua.CheckString(L, 2);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleFromFile(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAssetBundleAsyncFromFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleAsyncFromFile(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<float>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<float> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<float>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleAsyncFromFile(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleAsyncFromFile(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<UnityEngine.Object>), typeof(System.Action<float>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				System.Action<float> arg3 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg3 = (System.Action<float>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleAsyncFromFile(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToAssetBundleAsyncFromFile");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAssetBundleCoroutineFromFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleCoroutineFromFile(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleCoroutineFromFile(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToAssetBundleCoroutineFromFile");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAssetBundleFromNewWWW(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			string arg1 = ToLua.CheckString(L, 2);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleFromNewWWW(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAssetBundleFromCacheOrDownload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			string arg1 = ToLua.CheckString(L, 2);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleFromCacheOrDownload(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToAssetBundleCoroutineFromCacheOrDownload(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleCoroutineFromCacheOrDownload(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string), typeof(System.Action<UnityEngine.Object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.Object> arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<UnityEngine.Object>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToAssetBundleCoroutineFromCacheOrDownload(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.ToAssetBundleCoroutineFromCacheOrDownload");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			string arg1 = ToLua.CheckString(L, 2);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.ToResource(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Instantiate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.Instantiate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Action<object>)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Action<object> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
				}

				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.Instantiate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.Instantiate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Action<object>), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Action<object> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
				}

				string arg2 = ToLua.ToString(L, 3);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.Instantiate(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IBinding), typeof(System.Action<object>), typeof(int), typeof(string), typeof(string)))
			{
				ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.ToObject(L, 1);
				System.Action<object> arg1 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<object>)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
				}

				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				string arg3 = ToLua.ToString(L, 4);
				string arg4 = ToLua.ToString(L, 5);
				ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.Instantiate(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.Container.UnityBindingExtension.Instantiate");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			object arg1 = ToLua.ToVarObject(L, 2);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.Unload(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IBinding arg0 = (ToluaContainer.Container.IBinding)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IBinding));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
			ToluaContainer.Container.IBinding o = ToluaContainer.Container.UnityBindingExtension.UnloadAssetBundle(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			ToluaContainer.Container.UnityBindingExtension.CleanCache();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

