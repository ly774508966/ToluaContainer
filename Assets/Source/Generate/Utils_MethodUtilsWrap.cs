//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Utils_MethodUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Utils.MethodUtils), typeof(System.Object));
		L.RegFunction("CreateConstructor", CreateConstructor);
		L.RegFunction("CreateConstructorWithParams", CreateConstructorWithParams);
		L.RegFunction("CreateFieldSetter", CreateFieldSetter);
		L.RegFunction("CreatePropertySetter", CreatePropertySetter);
		L.RegFunction("CreateParameterlessMethod", CreateParameterlessMethod);
		L.RegFunction("CreateParameterizedMethod", CreateParameterizedMethod);
		L.RegFunction("New", _CreateUtils_MethodUtils);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUtils_MethodUtils(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Utils.MethodUtils obj = new Utils.MethodUtils();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Utils.MethodUtils.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateConstructor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			System.Reflection.ConstructorInfo arg1 = (System.Reflection.ConstructorInfo)ToLua.CheckObject(L, 2, typeof(System.Reflection.ConstructorInfo));
			ToluaContainer.Container.Constructor o = Utils.MethodUtils.CreateConstructor(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateConstructorWithParams(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			System.Reflection.ConstructorInfo arg1 = (System.Reflection.ConstructorInfo)ToLua.CheckObject(L, 2, typeof(System.Reflection.ConstructorInfo));
			ToluaContainer.Container.ParamsConstructor o = Utils.MethodUtils.CreateConstructorWithParams(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateFieldSetter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			System.Reflection.FieldInfo arg1 = (System.Reflection.FieldInfo)ToLua.CheckObject(L, 2, typeof(System.Reflection.FieldInfo));
			ToluaContainer.Container.Setter o = Utils.MethodUtils.CreateFieldSetter(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePropertySetter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			System.Reflection.PropertyInfo arg1 = (System.Reflection.PropertyInfo)ToLua.CheckObject(L, 2, typeof(System.Reflection.PropertyInfo));
			ToluaContainer.Container.Setter o = Utils.MethodUtils.CreatePropertySetter(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateParameterlessMethod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject(L, 2, typeof(System.Reflection.MethodInfo));
			ToluaContainer.Container.ParameterlessMethod o = Utils.MethodUtils.CreateParameterlessMethod(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateParameterizedMethod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 1, typeof(System.Type));
			System.Reflection.MethodInfo arg1 = (System.Reflection.MethodInfo)ToLua.CheckObject(L, 2, typeof(System.Reflection.MethodInfo));
			ToluaContainer.Container.ParamsMethod o = Utils.MethodUtils.CreateParameterizedMethod(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

