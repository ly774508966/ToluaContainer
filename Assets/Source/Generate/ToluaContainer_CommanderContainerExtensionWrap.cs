//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToluaContainer_CommanderContainerExtensionWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("CommanderContainerExtension");
		L.RegFunction("GetCommandDispatcher", GetCommandDispatcher);
		L.RegFunction("RegisterCommand", RegisterCommand);
		L.RegFunction("RegisterCommands", RegisterCommands);
		L.RegFunction("PoolCommands", PoolCommands);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCommandDispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.IInjectionContainer arg0 = (ToluaContainer.Container.IInjectionContainer)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IInjectionContainer));
			ToluaContainer.ICommandDispatcher o = ToluaContainer.CommanderContainerExtension.GetCommandDispatcher(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ToluaContainer.Container.IInjectionContainer arg0 = (ToluaContainer.Container.IInjectionContainer)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IInjectionContainer));
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			ToluaContainer.Container.IInjectionContainer o = ToluaContainer.CommanderContainerExtension.RegisterCommand(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCommands(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IInjectionContainer), typeof(string)))
			{
				ToluaContainer.Container.IInjectionContainer arg0 = (ToluaContainer.Container.IInjectionContainer)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				ToluaContainer.Container.IInjectionContainer o = ToluaContainer.CommanderContainerExtension.RegisterCommands(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(ToluaContainer.Container.IInjectionContainer), typeof(string), typeof(bool)))
			{
				ToluaContainer.Container.IInjectionContainer arg0 = (ToluaContainer.Container.IInjectionContainer)ToLua.ToObject(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				ToluaContainer.Container.IInjectionContainer o = ToluaContainer.CommanderContainerExtension.RegisterCommands(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ToluaContainer.CommanderContainerExtension.RegisterCommands");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PoolCommands(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ToluaContainer.Container.IInjectionContainer arg0 = (ToluaContainer.Container.IInjectionContainer)ToLua.CheckObject(L, 1, typeof(ToluaContainer.Container.IInjectionContainer));
			ToluaContainer.Container.IInjectionContainer o = ToluaContainer.CommanderContainerExtension.PoolCommands(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

